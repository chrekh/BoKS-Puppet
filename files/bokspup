#!/bin/bash
#
#

##############################################################
# Setup section to tweak the script's behavior.
#

BOKSetc="/etc/opt/boksm"
PROGNAME="$(basename $0)"			# This script
TIMESTAMP=$(date +%y%m%d%H%M)			# Used for scratchfiles
SCRATCHFILE="/tmp/${PROGNAME}.${TIMESTAMP}"	# Used as generic scratchfile

DEBUG="0"			# Set to 1 to skip syslog and output to stdout.
				# Set to 0 for normal operations. (default)
				# Overridden by passing the -d parameter.

ROOTUSERCLASS="GenericUser"	# BoKS userclass to apply to root users created by this script.
ROOTHOME="/root"		# Root home directory
ROOTSHELL="/bin/bash"		# Root shell

BASEHOME="/home"				# Base directory used for home directories
REGISTERFLAG="REGISTER_IF_NOT_IN_BOKS" 		# Flag used for host preregistration
DEREGISTERFLAG="REMOVE_NEVER"			# Flag used for host de-registration
PREREGSECRET="${BOKSetc}/prereg-secret"		# File containing the host preregistration password



##############################################################
# Generic overhead functions
#

# Function to output errors into syslog.
# First parameter must be: [DEBUG|INFO|WARN|ERROR|FATAL]
# Second parameter is a free-form string containing the error.
# Template example: 
# [[ TEST ]] && logger LEVEL "MESSAGE"

logger() {
	LEVEL="$1"
	MESSAGE="$2"

	[[ ${DEBUG} -gt 0 ]] && /bin/echo ${LEVEL} "$MESSAGE" || /usr/bin/logger -p ${LEVEL} "$MESSAGE"
} 


# Function to output help information.
show-help() {
	echo ""
	cat << EOF
	Usage: 
	${PROGNAME} [-d] -m prereg [-a|-l] -h fqhn [-i ip]
	${PROGNAME} [-d] -m root [-a|-l] -h fqhn 
	
	Provides a closed-down interface for the puppet privileged user to work
	with BoKS Access Control. Does not provide any output, unless running in
	debug mode. 

	Only output of this script is through exit codes: 0=OK, 1=NOK.
	
	-d          Debug mode, outputs all logging to stdout instead of syslog.
	-m prereg    Add or verify host preregistration record for specified host.
	-m root      Add or verify root account for specified host.
EOF
echo ""
}


# Parsing the passed parameters.
OPTIND=1	# Reset arguments counter, just to be sure
MODE=""
ACTION=""
HOSTNAME=""
IPADDR=""

while getopts "?dm:alh:i:" opt; do
    case "$opt" in
    \?) show-help; exit 1 ;;
    d) DEBUG="1" ;;
    m) MODE=${OPTARG} ;;
    a) ACTION="a" ;;
    l) ACTION="l" ;;
    h) HOSTNAME=${OPTARG} ;;
    i) IPADDR=${OPTARG} ;;
    esac
done

[[ -z ${MODE} ]] && (logger ERROR "No mode specified for ${PROGNAME}."; exit 1)
[[ -z ${ACTION} ]] && (logger ERROR "No action specified for ${PROGNAME}."; exit 1)


##############################################################
# Defining the various actions and modes.
#

prereg() {
[[ ${DEBUG} -gt 0 ]] && logger DEBUG "Starting function prereg." 
[[ -z ${HOSTNAME} ]] && (logger ERROR "No hostname specified for ${PROGNAME}, mode ${MODE}."; exit 1)

if [[ ${ACTION} == "a" ]]
then
	# Adding a host preregistration.
	if [[ -z ${IPADDR} ]]; then logger ERROR "No IP specified for ${PROGNAME}, mode ${MODE}."; exit 1; fi
	hostprereg -a -h ${HOSTNAME} -i ${IPADDR} -p "${BASEHOME}" -R ${REGISTERFLAG} -E ${DEREGISTERFLAG} -s "${PREREGSECRET}" >/dev/null 2>&1
	if [[ $? -gt 0 ]]; then logger ERROR "Could not create host prereg record for ${HOSTNAME}."; exit 1; else exit 0; fi
elif [[ ${ACTION} == "l" ]]
then	
	# Verifying a host preregistration
	[[ -z $(hostprereg -l -h ${HOSTNAME} 2>/dev/null) ]] && exit 1 || exit 0
else
	# Invalid action, should not happen.
	logger ERROR "Invalid action for mode ${MODE}, running for ${HOSTNAME}."
	exit 1
fi

}


root() {
[[ ${DEBUG} -gt 0 ]] && logger DEBUG "Starting function root." 
[[ -z ${HOSTNAME} ]] && (logger ERROR "No hostname specified for ${PROGNAME}, mode ${MODE}."; exit 1)

if [[ ${ACTION} == "a" ]]
then
	# Adding a root account.
	mkbks -l ${HOSTNAME}:root -u 0 -g 0 -h "${ROOTHOME}" -r "Superuser from BoKS-Puppet" -s "${ROOTSHELL}" -P "${ROOTUSERCLASS}" >/dev/null 2>&1
	if [[ $? -gt 0 ]]; then logger ERROR "Could not create root account for ${HOSTNAME}."; exit 1; fi
	ttyadmin -a -l ${HOSTNAME}:root -z "login:*->${HOSTNAME}" >/dev/null 2>&1
	if [[ $? -gt 0 ]]; then logger ERROR "Could not create access route for root at ${HOSTNAME}."; exit 1; fi
	exit 0
elif [[ ${ACTION} == "l" ]]
then	
	# Verifying a root account.
	[[ -z $(lsbks -l ${HOSTNAME}:root) ]] && exit 1 || exit 0
else
	# Invalid action, should not happen.
	logger ERROR "Invalid action for mode ${MODE}, running for ${HOSTNAME}."
	exit 1
fi

}



##############################################################
# The main loop.

[[ ${DEBUG} -gt 0 ]] && logger DEBUG "Starting main phase." 

${MODE}


